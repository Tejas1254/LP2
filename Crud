const express = require('express');
const mongoose = require('mongoose');

const app = express();
app.use(express.static('public'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

mongoose.connect('mongodb://localhost:27017/crudDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('MongoDB connected');
  app.listen(5000, () => console.log('Server running on port 5000'));
}).catch(err => console.error('MongoDB error:', err));

const Item = mongoose.model('Item', new mongoose.Schema({
  name: { type: String, required: true },
  price: { type: Number, required: true }
}));

app.route('/api/items')
  .get(async (req, res) => {
    try {
      res.json(await Item.find());
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  })
  .post(async (req, res) => {
    try {
      res.json(await new Item(req.body).save());
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  });

app.route('/api/items/:id')
  .put(async (req, res) => {
    try {
      res.json(await Item.findByIdAndUpdate(req.params.id, req.body, { new: true }));
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  })
  .delete(async (req, res) => {
    try {
      await Item.findByIdAndDelete(req.params.id);
      res.json({ message: 'Item deleted' });
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  });

public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Node.js CRUD Test</title>
</head>
<body>
  <h1>CRUD Operations</h1>

  <div>
    <h2>Create Item</h2>
    <input id="createName" placeholder="Name" />
    <input id="createPrice" placeholder="Price" type="number" />
    <button id="createBtn">Create</button>
  </div>

  <div>
    <h2>Items List</h2>
    <ul id="itemsList"></ul>
  </div>

  <div>
    <h2>Update Item</h2>
    <input id="updateId" placeholder="Item ID" />
    <input id="updateName" placeholder="New Name" />
    <input id="updatePrice" placeholder="New Price" type="number" />

    <button id="updateBtn">Update</button>
  </div>

  <div>
    <h2>Delete Item</h2>
    <input id="deleteId" placeholder="Item ID" />
    <button id="deleteBtn">Delete</button>
  </div>

  <!-- Link to external JS -->
  <script src="app.js"></script>
</body>
</html>

/public/app.js
const apiUrl = 'http://localhost:5000/api/items';

// Load initial items and bind events
document.addEventListener('DOMContentLoaded', () => {
  document.getElementById('createBtn').addEventListener('click', createItem);
  document.getElementById('updateBtn').addEventListener('click', updateItem);
  document.getElementById('deleteBtn').addEventListener('click', deleteItem);
  getAllItems();
});

function createItem() {
  const name = document.getElementById('createName').value.trim();
  const price = parseFloat(document.getElementById('createPrice').value);

  if (!name || isNaN(price)) {
    alert('Please enter a valid name and price.');
    return;
  }

  fetch(apiUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ name, price })
  })
  .then(res => res.json())
  .then(data => {
    alert(`Item Created: ${data.name}`);
    document.getElementById('createName').value = '';
    document.getElementById('createPrice').value = '';
    getAllItems();
  })
  .catch(err => console.error('Create Error:', err));
}

function updateItem() {
    const id = document.getElementById('updateId').value.trim();
    const name = document.getElementById('updateName').value.trim();
    const price = parseFloat(document.getElementById('updatePrice').value);  // Get the price
  
    if (!id || !name || isNaN(price)) { // Check if both name and price are valid
      alert('Please enter Item ID, new name, and a valid price.');
      return;
    }
  
    fetch(`${apiUrl}/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, price })  // Send name and price in the request body
    })
    .then(res => res.json())
    .then(data => {
      alert(`Item Updated: ${data.name}`);
      document.getElementById('updateId').value = '';
      document.getElementById('updateName').value = '';
      document.getElementById('updatePrice').value = '';  // Clear price input after update
      getAllItems();
    })
    .catch(err => console.error('Update Error:', err));
  }
  

function deleteItem() {
  const id = document.getElementById('deleteId').value.trim();

  if (!id) {
    alert('Please enter the Item ID to delete.');
    return;
  }

  fetch(`${apiUrl}/${id}`, {
    method: 'DELETE'
  })
  .then(res => res.json())
  .then(() => {
    alert('Item Deleted');
    document.getElementById('deleteId').value = '';
    getAllItems();
  })
  .catch(err => console.error('Delete Error:', err));
}

function getAllItems() {
  const itemsList = document.getElementById('itemsList');
  itemsList.innerHTML = '<li>Loading...</li>';

  fetch(apiUrl)
    .then(res => res.json())
    .then(data => {
      itemsList.innerHTML = '';
      if (data.length === 0) {
        itemsList.innerHTML = '<li>No items found.</li>';
        return;
      }
      data.forEach(item => {
        const li = document.createElement('li');
        li.textContent = `${item._id} - ${item.name} - $${item.price}`;
        itemsList.appendChild(li);
      });
    })
    .catch(err => {
      itemsList.innerHTML = '<li>Error loading items.</li>';
      console.error('Fetch Error:', err);
    });
}
